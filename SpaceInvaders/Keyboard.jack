// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char key;

        // Wait for a key press
        let key = Keyboard.keyPressed();
        while (key = 0) {
            let key = Keyboard.keyPressed();
        }

        // Wait for key to lift
        while (Keyboard.keyPressed() = key) {}

        // Print the char
        do Output.printChar(key);
        return key;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String readString, returnedString;
        var char key;
        var int i;

        // Print the requested message on screen
        do Output.printString(message);

        // Read the requested line
        let readString = String.new(1472);      // Since we don't know how long the string will
                                                // be we need to allocate maximum length string
        let key = Keyboard.readChar();
        while (~(key = String.newLine())) {
            if (key < 128) {
                do readString.appendChar(key);
            }

            else {
                if (key = String.backSpace()) {
                    do readString.eraseLastChar();
                }
            }

            let key = Keyboard.readChar();
        }

        // Trim the string to required length
        let returnedString = String.new(readString.length());
        let i = 0;
        while (i < readString.length()) {
            do returnedString.appendChar(readString.charAt(i));
            let i = i + 1;
        }

        do readString.dispose();
        let readString = null;

        return returnedString;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String readLine;
        var int value;

        let readLine = Keyboard.readLine(message);
        let value = readLine.intValue();

        do readLine.dispose();
        let readLine = null;

        return value;
    }
}
