// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }

        return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int bit;        // Used for comparison with the i'th bit of y
        var boolean sign;

        let sum = 0;
        let bit = 1;

        // Make sure y is not negative
        let sign = y > 0;
        if (y < 0) {
            let y = -y;
        }

        while ((~(bit = 0)) & (~(bit > y))) {
            if ((bit & y) = bit) {
                let sum = sum + x;
            }

            let x = x + x;
            let bit = bit + bit;
        }

        if (sign) {
            return sum;
        }

        return -sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int portion, q;
        var boolean sign;

        if (y = 0) {
            // Division by zero error
            do Sys.error(3);
            // Unreachable code
        }
        let sign = (((x > 0) & (y > 0)) | ((x < 0) & (y < 0)));
        if (x < 0){
                let x = -x;
                }
        if (y < 0){
                let y = -y;
                }
        if (x = 0){
            return 0;
            }

        let q = Math.dividePositives(x, y + y);
        if ( (x - ((q + q) * y)) < y){
            let portion = q + q;
        }
        else{
            let portion = q + q + 1;

        }

        if (sign) {
            return portion;
        }

        return -portion;
    }


     function int dividePositives(int x, int y) {
        var int portion, q;
        if ((x < y) | (~(y > 0))){
            return 0;
            }
        let q = Math.dividePositives(x, y + y);
        if ( (x - ((q + q) * y)) < y){
            let portion = q + q;
        }
        else{
            let portion = q + q + 1;
            }
        return portion;

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int low, medium, high;

        if (x < 0) {
            // Cannot compute the squre root of a negative number error
            do Sys.error(4);
            // Unreachable code
        }

        let low = 0;
        let high = Math.min(x, 182);

        while (low < (high - 1)) {
            let medium = (high + low) / 2;
            if ((medium * medium) > x) {
                let high = medium;
            }
            else {
                let low = medium;
            }
        }

        return low;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }

        return a;
    }
}
