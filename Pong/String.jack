// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array raw;
    field int maxLength;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int _maxLength) {
        let maxLength = _maxLength;
        let length = 0;

        if (maxLength > 0) {
            let raw = Array.new(maxLength);
        }
        else {
            let raw = null;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(raw=0)) {
            do raw.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return raw[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let raw[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let raw[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value;
        var int i;
        var int currentDigit;
        var boolean sign;

        let value = 0;
        let i = 0;

        if (raw[0] = 45) {
            // raw[0] is '-'
            let sign = false;
            let i = 1;
        }
        else {
            let sign = true;
        }

        while (i < length) {
            if ((raw[i] > 47) & (raw[i] < 58)) {
                // raw[i] is between '0' to '9'
                let currentDigit = raw[i] - 48;
            }
            else {
                if (sign) {
                    return value;
                }
                else {
                    return -value;
                }
            }

            let value = (value * 10) + currentDigit;
            let i = i + 1;
        }

        if (sign) {
            return value;
        }

        return -value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int value, nextValue;
        var int currentDigit;
        var int i;

        // Handle special case where val is 0
        if (val = 0) {
            let raw[0] = 48;
            let length = 1;
            return;
        }

        let value = Math.abs(val);
        let i = maxLength - 1;

        // Fill this value from the end
        while (value > 0) {
            let nextValue = value / 10;
            let currentDigit = value - (nextValue * 10);
            let raw[i] = 48 + currentDigit;
            let value = nextValue;
            let i = i - 1;
        }

        // Check if we need to add a minus sign
        if (val < 0) {
            let raw[i] = 45;        // '-'
        }
        else {
            let i = i + 1;
        }

        // Fix length, and copy the generated string to the beginning
        let length = maxLength - i;
        while (i < maxLength) {
            let raw[length - maxLength + i] = raw[i];
            let i = i + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
