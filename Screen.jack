// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;
    static int screenBase;
    static Array exponent2;

    /** Initializes the Screen. */
    function void init() {
        let exponent2 = Array.new(16);
        let exponent2[0] = -32678;
        let exponent2[1] = 1;
        let exponent2[2] = 2;
        let exponent2[3] = 4;
        let exponent2[4] = 8;
        let exponent2[5] = 16;
        let exponent2[6] = 32;
        let exponent2[7] = 64;
        let exponent2[8] = 128;
        let exponent2[9] = 256;
        let exponent2[10] = 512;
        let exponent2[11] = 1024;
        let exponent2[12] = 2048;
        let exponent2[13] = 4096;
        let exponent2[14] = 8192;
        let exponent2[15] = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int currentAddress;
        let currentAddress = screenBase;
        while (currentAddress < 32767){
            do Memory.poke(currentAddress,0);
            let currentAddress = currentAddress + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int bite;
        var int address;
        var int xdiv16;

        //invalid coordinates
        if ((x<0) | (x>511) | (y<0) | (y>255)){
            do Sys.error(7);
        }
        let xdiv16 = x / 16;
        let address = (y * 32) + xdiv16;
        let x = x - xdiv16;
        let bite = Memory.peek(screenBase + address);

        if (color){
            do Memory.poke(address, bite | exponent2[x]);
        }

        else{
            do Memory.poke(address, bite & (~exponent2[x]));
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, bdxMinusady, dx, dy,startX, startY;
        if ((Math.min(x1,x2) < 0) | (Math.min (y1,y2) < 0) | (Math.max(x1,x2) > 511) | (Math.max(y1,y2) > 511)){ 
                //Illegal line coordinates
                do Sys.error(8);
        }
            let a = 0;
            let b = 0;
            let bdxMinusady = 0;
            let dx = Math.abs(x1-x2);
            let dy = Math.abs(y1-y2);
        if (x1 = Math.max(x1,x2)){
            let startX = x2;
            let startY = y2;
        }
        else{
            let startX = x1;
            let startY = y1;
        }
        if (x1 = x2){
            while (b < dy){
                do Screen.drawPixel(x1, startY + b);
                let b = b + 1;
                }
            return;
            }
        if (y1 = y2){
            while (a < dx){
                do Screen.drawPixel(startX + a,y1);
                let a = a + 1;
                }
            return;
        }
        
        while (~((a = dx) & (b=dy))){
            do Screen.drawPixel(a+startX, b+startY);
            if (bdxMinusady<0){
                let b = b+1;
                let bdxMinusady = bdxMinusady + dx;
            }
            else {
                let a = a+1;
                let bdxMinusady = bdxMinusady - dy;
            }
        }
        return;
       
        
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;

        if ((x1 < 0) | (y1 < 0) | (x1 > 511) | (y1 > 511) 
           |(x2 < 0) | (y2 < 0) | (x2 > 511) | (y2 > 511)){ 
                //Illegal rectangle coordinates
                do Sys.error(9);
        }

        let x = x1;

        while (x < x2){
            do Screen.drawPixel(x,y1);
            do Screen.drawPixel(x,y2);
        }
        let y = y1;
        while (y < y2){
            do Screen.drawPixel(x1,y);
            do Screen.drawPixel(x2,y);
        }
        return;

       
    }
    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rpow2;
        if ((x < 0) | (y < 0) | (x > 511) | (y > 511)){ 
            //Illegal circle coordinates
            do Sys.error(12);
            }
        if (( (x -r) < 0) | ((y - r) < 0) | ((x + r) > 255 ) |  ((x + r) > 255 )){
            //illegal radius
            do Sys.error(13);
            }
        let dy = -r;
        let rpow2 = (r * r);
        let r = (r + 1);
        while (dy < r){
            let dx = Math.sqrt((rpow2 - (dy * dy)));
            do Screen.drawLine(x - dx, y + dy, x + dx, y+dy);
        }
        return;
        }
}
